<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>峰享会</title>
  
  <subtitle>漫道求索</subtitle>
  <link href="/./atom.xml" rel="self"/>
  
  <link href="https://yangyfeng.github.io/"/>
  <updated>2021-08-18T09:02:49.561Z</updated>
  <id>https://yangyfeng.github.io/</id>
  
  <author>
    <name>漫道求索</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github API v3 介绍文档</title>
    <link href="https://yangyfeng.github.io//posts/ef2e5c8.html"/>
    <id>https://yangyfeng.github.io//posts/ef2e5c8.html</id>
    <published>2021-08-17T16:00:00.000Z</published>
    <updated>2021-08-18T09:02:49.561Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于常用Github的用户来说，经常有一些自动化的需求。比如我的需求是定时备份Github的issues和comments到本地。以下为Github的API的使用参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.github.com/v3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v3版API的文档链接&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.github.com/v3/guides/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v3版API的官方教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本访问路径-Root-Endpoints&quot;&gt;&lt;a href=&quot;#基本访问路径-Root-Endpoints&quot; class=&quot;headerlink&quot; title=&quot;基本访问路径 (Root Endpoints)&quot;&gt;&lt;/a&gt;基本访问路径 (Root Endpoints)&lt;/h2&gt;&lt;p&gt;一开始读文档的时候，照着它的事例直接在命令行里&lt;code&gt;curl&lt;/code&gt;，或者在InSomnia或Postman软件里访问，都完美显示200状态。可是一旦把链接里改写成自己的用户名就各种显示404无页面。还以为是授权问题，然后在页头HEADER中按照各种方式试了username和token密钥，都没用还是404。结果发现，原来不是方法的问题，纯粹是链接地址没写对！&lt;br&gt;&lt;code&gt;实际上只是读取的话，完全不用任何授权&lt;/code&gt;，可以在命令行、Insomnia、网页等各种情况下直接输入链接访问任何人的所有公开信息。&lt;br&gt;然后对照&lt;a href=&quot;https://api.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方路径列表Root Endpoints&lt;/a&gt;得到的链接，好像怎么访问都不对。反而在Stackoverflow中看到的一个链接，顺藤摸瓜自己发现了各种正确的访问路径，总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先！访问的链接最后不能有&lt;code&gt;/&lt;/code&gt;。如&lt;code&gt;https://api.github.com/users/solomonxie&lt;/code&gt;是可以访问到我个人信息的，但是&lt;code&gt;https://api.github.com/users/solomonxie/&lt;/code&gt;就不行了，唯一不同是多了一个&lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;其次！不同于一般URL访问，GIthub的API访问链接是&lt;code&gt;区分大小写&lt;/code&gt;的！&lt;/li&gt;
&lt;li&gt;个人主要信息。 &lt;code&gt;https://api.github.com/users/用户名&lt;/code&gt;,得到数据如下图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/fTZ6nf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/08/18/fTZ6nf.png&quot; alt=&quot;fTZ6nf.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人所有repo。&lt;code&gt;https://api.github.com/users/用户名/repos&lt;/code&gt;。会得到一个repo的JSON格式列表。&lt;/li&gt;
&lt;li&gt;repo详细信息。&lt;code&gt;https://api.github.com/repos/用户名/仓库名&lt;/code&gt;。repo的路径就开始和个人信息不同了。&lt;/li&gt;
&lt;li&gt;获取某个repo的内容列表。&lt;code&gt;https://api.github.com/repos/solomonxie/gists/contents&lt;/code&gt;，注意这只会返回根目录的内容。&lt;/li&gt;
&lt;li&gt;获取repo中子目录的内容列表。&lt;code&gt;https://api.github.com/repos/solomonxie/gists/contents/目录名&lt;/code&gt;。一定要注意这里一定要完全遵循原文件名的大小写，否则无法获得信息。如果是更深层的内容，则在链接列按照顺序逐级写上目录名称。&lt;/li&gt;
&lt;li&gt;获取repo中某文件信息（不包括内容）。&lt;code&gt;https://api.github.com/repos/solomonxie/gists/contents/文件路径&lt;/code&gt;。文件路径是文件的完整路径，区分大小写。只会返回文件基本信息。&lt;/li&gt;
&lt;li&gt;获取某文件的原始内容（Raw）。1. 通过上面的文件信息中提取&lt;code&gt;download_url&lt;/code&gt;这条链接，就能获取它的原始内容了。2. 或者直接访问：&lt;code&gt;https://raw.githubusercontent.com/用户名/仓库名/分支名/文件路径&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;repo中所有的commits列表。&lt;code&gt;https://api.github.com/repos/用户名/仓库名/commits&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;某一条commit详情。&lt;code&gt;https://api.github.com/repos/用户名/仓库名/commits/某一条commit的SHA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;issues列表。&lt;code&gt;https://api.github.com/repos/用户名/仓库名/issues&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;某条issue详情。&lt;code&gt;https://api.github.com/repos/用户名/仓库名/issues/序号&lt;/code&gt;。issues都是以1,2,3这样的序列排号的。&lt;/li&gt;
&lt;li&gt;某issue中的comments列表。&lt;code&gt;https://api.github.com/repos/用户名/仓库名/issues/序号/comments&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;某comment详情。&lt;code&gt;https://api.github.com/repos/用户名/仓库名/issues/comments/评论详情的ID&lt;/code&gt;。其中评论ID是从issues列表中获得的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;查询参数-Parameters&quot;&gt;&lt;a href=&quot;#查询参数-Parameters&quot; class=&quot;headerlink&quot; title=&quot;查询参数 (Parameters)&quot;&gt;&lt;/a&gt;查询参数 (Parameters)&lt;/h2&gt;&lt;p&gt;如果在上面基本链接中加入查询条件，那么返回的数据就是filtered，过滤了的。比如要求只返回正在开放的issues，或者让列表数据分页显示。常用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分页功能。格式是&lt;code&gt;?page=页数&amp;amp;per_page=每页包含数量&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如&lt;code&gt;https://api.github.com/users/solomonxie/repos?page=2&amp;amp;per_page=3&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;issues状态。格式是&lt;code&gt;?state=状态&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如&lt;code&gt;https://api.github.com/repos/solomonxie/solomonxie.github.io/issues?state=closed&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;权限认证-Authentication&quot;&gt;&lt;a href=&quot;#权限认证-Authentication&quot; class=&quot;headerlink&quot; title=&quot;权限认证 Authentication&quot;&gt;&lt;/a&gt;权限认证 Authentication&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;首先需要知道都是，到此为止之前所有都查询都是不需要任何权限的，给个地址就返回数据，全公开。&lt;br&gt;但是创建文件、更新、删除等就是必须用自己的账号”登录”才能实现的。所以为了下面的增删改做准备，需要先看一下权限问题。&lt;br&gt;官网虽然写的很简答，不过如果不熟悉API的话还是不能马上就理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用的认证方法有三种，&lt;code&gt;Basic authentication&lt;/code&gt;, &lt;code&gt;OAuth2 token&lt;/code&gt;, &lt;code&gt;OAuth2 key/secret&lt;/code&gt;&lt;br&gt;三种方法效果一样，但是各有其特点和方便之处。选哪种就要看自己哪种方便了。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://yangyfeng.github.io/blogpost/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git cherry-pick 教程</title>
    <link href="https://yangyfeng.github.io//posts/69a7e668.html"/>
    <id>https://yangyfeng.github.io//posts/69a7e668.html</id>
    <published>2021-08-13T08:18:01.000Z</published>
    <updated>2021-08-13T08:24:12.719Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。&lt;/p&gt;
&lt;p&gt;这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（&lt;code&gt;git merge&lt;/code&gt;）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用
        
      
    
    </summary>
    
      <category term="开发工具" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://yangyfeng.github.io/blogpost/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>nodejs版本控制和切换</title>
    <link href="https://yangyfeng.github.io//posts/873788fc.html"/>
    <id>https://yangyfeng.github.io//posts/873788fc.html</id>
    <published>2021-08-12T16:00:00.000Z</published>
    <updated>2021-08-13T10:20:57.975Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;nvm是node.js的版本管理器，可以安装和切换不同版本node.js&lt;/p&gt;
&lt;h3 id=&quot;第一步：下载&quot;&gt;&lt;a href=&quot;#第一步：下载&quot; class=&quot;headerlink&quot; title=&quot;第一步：下载&quot;&gt;&lt;/a&gt;第一步：下载&lt;/h3&gt;&lt;p&gt;下载地址：&lt;a
        
      
    
    </summary>
    
      <category term="后端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Node" scheme="https://yangyfeng.github.io/blogpost/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>vue3学习起始</title>
    <link href="https://yangyfeng.github.io//posts/d69ba86b.html"/>
    <id>https://yangyfeng.github.io//posts/d69ba86b.html</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-04-29T09:36:42.161Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速起始&quot;&gt;&lt;a href=&quot;#快速起始&quot; class=&quot;headerlink&quot; title=&quot;快速起始&quot;&gt;&lt;/a&gt;快速起始&lt;/h2&gt;&lt;h3 id=&quot;cdn&quot;&gt;&lt;a href=&quot;#cdn&quot; class=&quot;headerlink&quot; title=&quot;cdn&quot;&gt;&lt;/a&gt;cdn&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.0.0-rc.7/vue.global.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;vue-cli&quot;&gt;&lt;a href=&quot;#vue-cli&quot; class=&quot;headerlink&quot; title=&quot;vue-cli&quot;&gt;&lt;/a&gt;vue-cli&lt;/h3&gt;&lt;p&gt;升级vue-cli v4.5&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; i -g @vue/cli@next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;vite&quot;&gt;&lt;a href=&quot;#vite&quot; class=&quot;headerlink&quot; title=&quot;vite&quot;&gt;&lt;/a&gt;vite&lt;/h3&gt;&lt;p&gt;使用vite体验更快速&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm init vite-app &amp;lt;project-name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &amp;lt;project-name&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm run dev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;从vue2迁移&quot;&gt;&lt;a href=&quot;#从vue2迁移&quot; class=&quot;headerlink&quot; title=&quot;从vue2迁移&quot;&gt;&lt;/a&gt;从vue2迁移&lt;/h2&gt;&lt;h3 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/composition-api-introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Composition API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/teleport.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Teleport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/fragments.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fragments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/component-custom-events.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emits Component Option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createRenderer&lt;/code&gt; API用于创建自定义渲染器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;破坏性变化&quot;&gt;&lt;a href=&quot;#破坏性变化&quot; class=&quot;headerlink&quot; title=&quot;破坏性变化&quot;&gt;&lt;/a&gt;破坏性变化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/global-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Global API 改为应用程序实例调用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/global-api-treeshaking.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Global and internal APIs重构为可做摇树优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/v-model.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;model&lt;/code&gt;选项和&lt;code&gt;v-bind&lt;/code&gt;的&lt;code&gt;sync&lt;/code&gt; 修饰符被移除，统一为v-model参数形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/render-function-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;渲染函数API修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/functional-components.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数式组件仅能通过简单函数方式创建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/functional-components.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;废弃在SFC的template上使用functional或者添加functional选项的方式声明函数式组件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/async-components.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;异步组件要求使用&lt;code&gt;defineAsyncComponent&lt;/code&gt; 方法创建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/data-option.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;组件data选项应该总是声明为函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/custom-elements-interop.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义组件白名单执行于编译时&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/custom-elements-interop.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;is&lt;/code&gt;属性仅限于用在&lt;code&gt;component&lt;/code&gt;标签上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/slots-unification.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;$scopedSlots&lt;/code&gt; 属性被移除，都用&lt;code&gt;$slots&lt;/code&gt;代替&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/attribute-coercion.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;特性强制策略变更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/custom-directives.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义指令API和组件一致&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一些transition类名修改:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v-enter&lt;/code&gt; -&amp;gt; &lt;code&gt;v-enter-from&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-leave&lt;/code&gt; -&amp;gt; &lt;code&gt;v-leave-from&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/api/options-data.html#watch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;watch 选项&lt;/a&gt; 和&lt;a href=&quot;https://v3.vuejs.org/api/instance-methods.html#watch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; 不再支持点分隔符字符串路径, 使用计算函数作为其参数&lt;/li&gt;
&lt;li&gt;Vue 2.x中应用程序根容器的 &lt;code&gt;outerHTML&lt;/code&gt; 会被根组件的模板替换 (或被编译为template)。Vue 3.x现在使用应用根容器的&lt;code&gt;innerHTML&lt;/code&gt;取代.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;移除&quot;&gt;&lt;a href=&quot;#移除&quot; class=&quot;headerlink&quot; title=&quot;移除&quot;&gt;&lt;/a&gt;移除&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/keycode-modifiers.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;移除&lt;code&gt;keyCode&lt;/code&gt; 作为 &lt;code&gt;v-on&lt;/code&gt; 修饰符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/events-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;on,on, on,off and $once 移除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/filters.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Filters移除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v3.vuejs.org/guide/migration/inline-template-attribute.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Inline templates attributes移除&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="Vue3" scheme="https://yangyfeng.github.io/blogpost/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>nvm工具切换node版本</title>
    <link href="https://yangyfeng.github.io//posts/43f370af.html"/>
    <id>https://yangyfeng.github.io//posts/43f370af.html</id>
    <published>2021-04-26T16:00:00.000Z</published>
    <updated>2021-04-27T10:36:19.707Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;node以往的版本&lt;/strong&gt; &lt;a href=&quot;https://nodejs.org/zh-cn/download/releases/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="后端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Node" scheme="https://yangyfeng.github.io/blogpost/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>github连接超时问题</title>
    <link href="https://yangyfeng.github.io//posts/d8976663.html"/>
    <id>https://yangyfeng.github.io//posts/d8976663.html</id>
    <published>2021-04-20T16:00:00.000Z</published>
    <updated>2021-08-18T08:48:56.108Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Github出现连接超时&quot;&gt;&lt;a href=&quot;#Github出现连接超时&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="开发工具" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://yangyfeng.github.io/blogpost/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>谈谈Vue 和 React 的diff有什么不同</title>
    <link href="https://yangyfeng.github.io//posts/35755b8d.html"/>
    <id>https://yangyfeng.github.io//posts/35755b8d.html</id>
    <published>2021-04-15T16:00:00.000Z</published>
    <updated>2021-04-29T09:39:58.954Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;说几个问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Computed 属性为什么能够在依赖改变的时候，自己发生变化？&lt;/li&gt;
&lt;li&gt;Vuex 的 Mutation 和 Action 的区别？&lt;/li&gt;
&lt;li&gt;React
        
      
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git提交规范</title>
    <link href="https://yangyfeng.github.io//posts/596552e8.html"/>
    <id>https://yangyfeng.github.io//posts/596552e8.html</id>
    <published>2021-03-22T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.641Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;规范化 git commit 对于提高 git log 可读性、可控的版本控制和 changelog 生成都有着重要的作用。然而阻碍我们脚步的不只是团队的推广，单单对于一系列工具的配置都让人头大。这其中主要就是 commitlint 和 commitizen
        
      
    
    </summary>
    
      <category term="开发工具" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://yangyfeng.github.io/blogpost/tags/Git/"/>
    
      <category term="开发工具" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>React Fiber原理解析</title>
    <link href="https://yangyfeng.github.io//posts/8e322b93.html"/>
    <id>https://yangyfeng.github.io//posts/8e322b93.html</id>
    <published>2021-03-07T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.619Z</updated>
    
    <summary type="html">
    
      &lt;p&gt; &lt;code&gt;React&lt;/code&gt;团队重写了&lt;code&gt;React&lt;/code&gt; 的核心算法—&lt;code&gt;reconciliation&lt;/code&gt;,一般将之前的算法叫&lt;code&gt;stack reconciliation&lt;/code&gt;，现在的叫&lt;code&gt;fiber reconciliation&lt;/code&gt;。 &lt;/p&gt;
&lt;h3 id=&quot;React-Fiber是什么&quot;&gt;&lt;a href=&quot;#React-Fiber是什么&quot; class=&quot;headerlink&quot; title=&quot;React Fiber是什么&quot;&gt;&lt;/a&gt;React Fiber是什么&lt;/h3&gt;&lt;p&gt; React Fiber是个什么东西呢？官方的一句话解释是“&lt;strong&gt;React Fiber是对核心算法的一次重新实现”&lt;/strong&gt;。 &lt;/p&gt;
&lt;p&gt; 为什么Facebook要搞React Fiber呢？  在现有React中，更新过程是同步的，这可能会导致性能问题。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同步更新过程的局限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当React决定要加载或者更新组件树时，会做很多事，比如调用各个组件的生命周期函数，计算和比对Virtual DOM，最后更新DOM树，这整个过程是同步进行的，也就是说只要一个加载或者更新过程开始，那React就以不破楼兰终不还的气概，一鼓作气运行到底，中途绝不停歇。&lt;/p&gt;
&lt;p&gt;表面上看，这样的设计也是挺合理的，因为更新过程不会有任何I/O操作嘛，完全是CPU计算，所以无需异步操作，的确只要一路狂奔就行了，但是，当组件树比较庞大的时候，问题就来了。&lt;/p&gt;
&lt;p&gt;假如更新一个组件需要1毫秒，如果有200个组件要更新，那就需要200毫秒，在这200毫秒的更新过程中，浏览器那个唯一的主线程都在专心运行更新操作，无暇去做任何其他的事情。想象一下，在这200毫秒内，用户往一个input元素中输入点什么，敲击键盘也不会获得响应，因为渲染输入按键结果也是浏览器主线程的工作，但是浏览器主线程被React占着呢，抽不出空，最后的结果就是用户敲了按键看不到反应，等React更新过程结束之后，咔咔咔那些按键一下子出现在input元素里了。&lt;/p&gt;
&lt;p&gt;这就是所谓的界面卡顿，很不好的用户体验。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/68SdWF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/09/68SdWF.md.png&quot; alt=&quot;68SdWF.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现有的React版本，当组件树很大的时候就会出现这种问题，因为更新过程是同步地一层组件套一层组件，逐渐深入的过程，在更新完所有组件之前不停止，函数的调用栈就像下图这样，调用得很深，而且很长时间不会返回。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://yangyfeng.github.io/blogpost/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>深入理解React</title>
    <link href="https://yangyfeng.github.io//posts/93b51ba9.html"/>
    <id>https://yangyfeng.github.io//posts/93b51ba9.html</id>
    <published>2021-03-07T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.621Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;React中响应式原理&quot;&gt;&lt;a href=&quot;#React中响应式原理&quot; class=&quot;headerlink&quot; title=&quot;React中响应式原理&quot;&gt;&lt;/a&gt;React中响应式原理&lt;/h3&gt;&lt;p&gt;1.开发者只需关注状态转移（数据），当状态发生变化，React框架会自动根据新的状态重新构建UI。&lt;/p&gt;
&lt;p&gt;2.React框架在接收到用户状态改变通知后，会根据当前渲染树，结合最新的状态改变，通过Diff算法，计算出树中变化的部分，然后只更新变化的部分（DOM操作），从而避免整棵树重构，提高性能。状态变化后React框架并不会立即去计算并渲染DOM树的变化部分，相反，React会在DOM的基础上建立一个抽象层，即虚拟DOM树，对数据和状态所做的任何改动，都会被自动且高效的同步到虚拟DOM，最后再批量同步到真实DOM中，而不是每次改变都去操作一下DOM。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么不能每次改变都直接去操作DOM树？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是因为在浏览器中每一次DOM操作都有可能引起浏览器的重绘或回流：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果DOM只是外观风格发生变化，如颜色变化，会导致浏览器重绘界面。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果DOM树的结构发生变化，如尺寸、布局、节点隐藏等导致，浏览器就需要回流（及重新排版布局）。&lt;br&gt;而浏览器的重绘和回流都是比较昂贵的操作，如果每一次改变都直接对DOM进行操作，这会带来性能问题，而批量操作只会触发一次DOM更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据发生变化，页面改变的原理：&lt;/strong&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较虚拟的dom 不怎么损耗性能，真实的dom比较会损耗性能 &lt;/p&gt;
&lt;p&gt;1.state 数据&lt;/p&gt;
&lt;p&gt;2.jsx 模板&lt;/p&gt;
&lt;p&gt;3.生成虚拟的dom&lt;/p&gt;
&lt;p&gt;3.数据和模板结合，生成虚拟的dom&lt;/p&gt;
&lt;p&gt;4.用虚拟的Dom 来生成真实的Dom,来显示&lt;/p&gt;
&lt;p&gt;5.state 发生改变&lt;/p&gt;
&lt;p&gt;6.数据和模板结合，生成虚拟的dom&lt;/p&gt;
&lt;p&gt;7.比较新的虚拟Dom和旧的虚拟Dom，找出差别，改变&lt;/p&gt;
&lt;p&gt;8.直接操作Dom,改变内容&lt;/p&gt;
&lt;p&gt;jsx语法 =&amp;gt; React.createElement=&amp;gt; 虚拟的Dom =&amp;gt;真实的Dom&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; ===  React.createElement(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;,&amp;#123; &amp;#125;,React.createElement(&lt;span class=&quot;string&quot;&gt;&#39;span&#39;&lt;/span&gt;,&amp;#123;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;props-state与render函数关系-–-数据和页面互相联动的底层机制&quot;&gt;&lt;a href=&quot;#props-state与render函数关系-–-数据和页面互相联动的底层机制&quot; class=&quot;headerlink&quot; title=&quot;props, state与render函数关系 – 数据和页面互相联动的底层机制&quot;&gt;&lt;/a&gt;&lt;strong&gt;props, state与render函数关系 – 数据和页面互相联动的底层机制&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当组件的state或者props发生改变的时候，自己的render函数就会重新执行。&lt;/p&gt;
&lt;p&gt;注意：当父组件的render被执行的时候，子组件的也render会被重新执行一次（因为在父组件的render里面）。&lt;/p&gt;
&lt;p&gt;也就是说当绑定的事件改变了state或者props，render函数就会重新执行解析页面，这个时候解析的时候就会使用新的数据了，所以页面就会变化。&lt;/p&gt;
&lt;h3 id=&quot;React中的虚拟DOM&quot;&gt;&lt;a href=&quot;#React中的虚拟DOM&quot; class=&quot;headerlink&quot; title=&quot;React中的虚拟DOM&quot;&gt;&lt;/a&gt;&lt;strong&gt;React中的虚拟DOM&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;刚才提到只要state、props改变就会重新render，可以想象要不断的重新渲染页面对性能要求非常高，实际上render的性能是非常高的，这是归功于虚拟DOM。&lt;/p&gt;
&lt;p&gt;首先明确DOM的相关操作需要调用web application对性能损耗是比较高的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;先看看常规的思路&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://yangyfeng.github.io/blogpost/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Vue知识点集合</title>
    <link href="https://yangyfeng.github.io//posts/5b9a2dd2.html"/>
    <id>https://yangyfeng.github.io//posts/5b9a2dd2.html</id>
    <published>2021-03-06T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.636Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2503&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在vue中watch和created哪个先执行？为什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2429&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue中mixins和extends有什么区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2428&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue中mixins有什么使用场景？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2427&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在vue中created与activated有什么区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2231&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在vue项目如何引入异步组件？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2230&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在vue项目中scss scoped穿透符&amp;gt;&amp;gt;&amp;gt;无效的解决方案有哪些？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2229&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;为什么在v-for中的key不推荐使用随机数或者index呢？那要怎么使用才比较好呢？&lt;/a&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="面试题" scheme="https://yangyfeng.github.io/blogpost/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>React知识点集合</title>
    <link href="https://yangyfeng.github.io//posts/13437c1d.html"/>
    <id>https://yangyfeng.github.io//posts/13437c1d.html</id>
    <published>2021-03-06T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.635Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;什么时候使用状态管理器？&lt;/li&gt;
&lt;li&gt;render函数中return如果没有使用()会有什么问题？&lt;/li&gt;
&lt;li&gt;componentWillUpdate可以直接修改state的值吗？&lt;/li&gt;
&lt;li&gt;说说你对React的渲染原理的理解&lt;/li&gt;
&lt;li&gt;什么渲染劫持？&lt;/li&gt;
&lt;li&gt;React Intl是什么原理？&lt;/li&gt;
&lt;li&gt;你有使用过React Intl吗？&lt;/li&gt;
&lt;li&gt;怎么实现React组件的国际化呢？
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://yangyfeng.github.io/blogpost/tags/React/"/>
    
      <category term="面试题" scheme="https://yangyfeng.github.io/blogpost/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>可视化定制开发</title>
    <link href="https://yangyfeng.github.io//posts/aab0fbb9.html"/>
    <id>https://yangyfeng.github.io//posts/aab0fbb9.html</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.645Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;定制开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户业务需求为基础，设计出客户满意的方案，前端根据设计图1:1完成开发。&lt;/p&gt;
&lt;p&gt;包括各类图表展示元素，地理位置信息展示单元（Gis、矢量、3d地球等），交互效果（酷炫动画，用户交互，展示效果等），实数数据监控
        
      
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>应急管理中心 刑侦案件地理信息可视化展示系统</title>
    <link href="https://yangyfeng.github.io//posts/f2d2e0b4.html"/>
    <id>https://yangyfeng.github.io//posts/f2d2e0b4.html</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.647Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>QTV2直播商城</title>
    <link href="https://yangyfeng.github.io//posts/b1fde4c6.html"/>
    <id>https://yangyfeng.github.io//posts/b1fde4c6.html</id>
    <published>2021-03-03T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.644Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;QTV-2直播生活供货商入驻系统，运行在微信公众号， 集资讯短视频，电商直播，购物商城为一体的青岛广电生活服务平台 。 其功能主要有直播打赏，直播抽奖，会员制，商品分享，弹幕评论等。微信搜索“QTV蛤蜊帮”，即可进入。 &lt;/p&gt;
&lt;h2 id=&quot;系统结构说明&quot;&gt;&lt;a href=&quot;#系统结构说明&quot; class=&quot;headerlink&quot; title=&quot;系统结构说明&quot;&gt;&lt;/a&gt;系统结构说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;核心模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6VwFh9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/04/6VwFh9.md.png&quot; alt=&quot;6VwFh9.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;业务架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6ehCSx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/05/6ehCSx.md.png&quot; alt=&quot;6ehCSx.md.png&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imgtu.com/i/6ehpf1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/05/6ehpf1.md.png&quot; alt=&quot;6ehpf1.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;业务介绍&quot;&gt;&lt;a href=&quot;#业务介绍&quot; class=&quot;headerlink&quot; title=&quot;业务介绍&quot;&gt;&lt;/a&gt;业务介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;产品分类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推荐、大牌MALL（商超大牌）、扶农助农、工厂清仓、母婴亲子、美食美味、珠光宝气、潮搭攻略、乐家生活、美妆心得等&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6V0Nx1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/04/6V0Nx1.md.png&quot; alt=&quot;6V0Nx1.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>华北电力控制系统</title>
    <link href="https://yangyfeng.github.io//posts/763ea06e.html"/>
    <id>https://yangyfeng.github.io//posts/763ea06e.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.645Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目概况&quot;&gt;&lt;a href=&quot;#项目概况&quot; class=&quot;headerlink&quot; title=&quot;项目概况&quot;&gt;&lt;/a&gt;项目概况&lt;/h2&gt;&lt;p&gt;数据可视化展示与开发中心，通过开发可视化设计器、可视化展示引擎、可视化控制平台、可视化后台服务及音视屏驱动软件，用于全方面、多角度展示智能发电运行控制系统整体架构与主要功能，开展发电设备三维可视化、发电过程音视频数据分析、状态识别与故障定位算法研究，最终形成“多业务，多窗口，多交互手段，少人工”的数据驾驶舱系统。&lt;/p&gt;
&lt;h2 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系统架构&quot;&gt;&lt;/a&gt;系统架构&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6V6DdP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/04/6V6DdP.md.png&quot; alt=&quot;6V6DdP.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总体应用框架分为六层框架结构，提供两类支撑，分别是“网络层”、“数据层”、“应用层”、“业务层”、“交互层”、“表现层”，支撑为“标准规范”与“硬件体系”。&lt;/p&gt;
&lt;h2 id=&quot;系统业务&quot;&gt;&lt;a href=&quot;#系统业务&quot; class=&quot;headerlink&quot; title=&quot;系统业务&quot;&gt;&lt;/a&gt;系统业务&lt;/h2&gt;&lt;p&gt;业务主要包括，工业指标的数据可视化展示（数据监测），设备的精准控制（手动，阀值报警或制动，语音智能控制），对数据的多类方式分析并给出高价值结果，各类测试数据下指标对比（灵活筛选对比的指标），以及用户权限控制，报表分析与下载，3d场景下的工业数据的可视化展示等。&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>国珍知识库管理系统</title>
    <link href="https://yangyfeng.github.io//posts/d02d7caa.html"/>
    <id>https://yangyfeng.github.io//posts/d02d7caa.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.646Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>风力发电SCADA</title>
    <link href="https://yangyfeng.github.io//posts/fa28e10b.html"/>
    <id>https://yangyfeng.github.io//posts/fa28e10b.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.647Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是SCADA&quot;&gt;&lt;a href=&quot;#什么是SCADA&quot; class=&quot;headerlink&quot; title=&quot;什么是SCADA&quot;&gt;&lt;/a&gt;什么是SCADA&lt;/h2&gt;&lt;p&gt;SCADA系统，即数据采集与监视控制系统。SCADA系统是以计算机为基础的DCS与电力自动化监控系统；它应用领域很广，可以应用于电力、冶金、石油、化工、燃气、铁路等领域的数据采集与监视控制以及过程控制等诸多领域。其功能主要围绕生产数据实时采集、生产设备过程监控、生产设备异常报警、数据分析、数据报表及仪表盘展示四个方面进行，其特性主要体现以下几个方面：&lt;/p&gt;
&lt;p&gt;1、支持5000多种通讯协议，满足市场上百分之99.99的控制器、仪器仪表的通讯要求。打通自动化硬件系统与信息化软件系统信息传递。&lt;br&gt;2、将办公网络IP与工业设备IP进行硬件隔离，避免IP冲突。&lt;br&gt;3、直观展示生产动态，对现场设备实现直接或间接控制，满足可视化管理的需求。&lt;br&gt;4、进行数据统计分析，并通过仪表盘进行展示。&lt;/p&gt;
&lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;风力发电厂的安全监测平台。将SCADA和IT运维监控内容融与数据可视化相融合形成安全监测平台。分别有数据可视化、SACDA、IT运维监控和基本功能4个主要功能模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;数据可视化：&lt;/em&gt;&lt;/strong&gt;主要提供前端展示内容，包括3D、2D建模和图表元素，形成沉浸式的监控展示体系，将业务、告警等相融合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SCADA：&lt;/em&gt;&lt;/strong&gt;将SCADA的原有功能和信息发布功能相结合，对升压站、风机进行实时数据监控，形成数据采集、分析、监控和预警的统一功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;IT运维监测：&lt;/em&gt;&lt;/strong&gt;对机房网络和服务进行整体的监控。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;基本功能：&lt;/em&gt;&lt;/strong&gt;账号管理、权限管理、部门管理和角色管理等内容。&lt;/p&gt;
&lt;p&gt;建设要求遵循了灵活性和可扩展性原则，能够适应业务变化和进步的要求，满足同行业电厂业务要求。平台系统所采用的相关标准必须与国际、国家、省、市级及行业标准相符合，确保系统具有良好的开放性，能实现与多种技术和软硬件平台的有机集成。&lt;/p&gt;
&lt;p&gt;对于用户而言，解决了在业务中一些棘手问题，如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;运营管理场景：&lt;/em&gt;&lt;/strong&gt;对变电站和风机进行全面的监控，提供直观高效的数据展现形式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;预警告警：&lt;/em&gt;&lt;/strong&gt;对预警和告警信息作出实时数据监控并发送相应的告警信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;运维支撑：&lt;/em&gt;&lt;/strong&gt;对业务运维和IT运维人员提供及时的信息提醒和展示，便于运维人员及时有效的进行电厂的整体维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;培训人员：&lt;/em&gt;&lt;/strong&gt;减少员工培训成本，快速理解电厂业务和相关工作岗位，增加员工的业务熟练程度和应急处理能力。&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>大数据可视化系统</title>
    <link href="https://yangyfeng.github.io//posts/5f998618.html"/>
    <id>https://yangyfeng.github.io//posts/5f998618.html</id>
    <published>2021-02-02T01:22:00.000Z</published>
    <updated>2021-04-29T09:37:29.131Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;一套数据可视化展示平台，支持多种数据源类型（CSV静态文件，数据库连接，Http接口，JSON静态数据，WebSocket连接）。拥有多种酷炫图表和动画，同时支持本地化部署，镜像保存，分享，权限控制等。支持自定义图表上传，支持多种可视化插件，如Echarts，D3，AntV等。3D可视化功能目前只支持Unity3D引擎。&lt;/p&gt;
&lt;h2 id=&quot;系统简介&quot;&gt;&lt;a href=&quot;#系统简介&quot; class=&quot;headerlink&quot; title=&quot;系统简介&quot;&gt;&lt;/a&gt;系统简介&lt;/h2&gt;&lt;p&gt;探索您拥有的所有数据，发现新的模式，创造丰富的视觉效果来共享洞察。利用该系统易于使用的分析和商业智能工具，您能够：&lt;/p&gt;
&lt;p&gt;①　快速获得信息概览，更快的通过可视化探索所有相关数据，飞速获取洞察。发现未知模式识别关键的联系，发现隐藏的机会。&lt;/p&gt;
&lt;p&gt;②　看到数据，理解数据，通过炫目的可视化方式，快速理解数据所表明的一切。基于分析的交互可视化让每个人都可以理解分析结果。&lt;/p&gt;
&lt;p&gt;③　停止猜测，更智慧地工作，简化数据准备。软件自动突出显示相关的重要发现，无需编程。&lt;/p&gt;
&lt;h2 id=&quot;功能详解&quot;&gt;&lt;a href=&quot;#功能详解&quot; class=&quot;headerlink&quot; title=&quot;功能详解&quot;&gt;&lt;/a&gt;功能详解&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/yHG0ln&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/22/yHG0ln.md.png&quot; alt=&quot;yHG0ln.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目只支持内网部署版本，未发版sass平台。&lt;/p&gt;
&lt;p&gt;用户有管理员逐一分配，适合多类企业的需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可视化大屏列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;展示方式有两种：卡片模式、列表模式&lt;/p&gt;
&lt;p&gt;卡片模式可以获取大屏内部的画面作为预览图或者用户自己设置封面&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6EpKA0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6EpKA0.md.png&quot; alt=&quot;6EpKA0.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/yHG3OP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/22/yHG3OP.md.png&quot; alt=&quot;yHG3OP.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之外每个大屏都可以锁定（设置密码）、发布、预览、复制、编辑等功能。&lt;/p&gt;
&lt;p&gt;左上角的创建按钮，跳转到创建大屏页面，创建时可选择模板、空白的任意比例的大屏，以及加入到多选分类中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可视化大屏配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E9MqA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E9MqA.md.png&quot; alt=&quot;6E9MqA.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在上方选择需要的图表拖入到中间画布，即可在右侧配置对应属性和数据，并能加入到收藏，供后面使用。&lt;/p&gt;
&lt;p&gt;其中在使用数据时，选择创建的数据源，然后做好字段映射即可，非常方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;离线部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;适配非常规拼接大屏，支持加密发布，支持本地部署，数据无需上传至第三方服务器或云端，私密数据的安全性更有保障。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多种数据源支持&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;支持接入关系型数据库、本地CSV上传和在线API等，支持动态请求，多服务平台信息可视化呈现。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E15T0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E15T0.md.png&quot; alt=&quot;6E15T0.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及可以使用用户自定义的数据做为数据源在图表上使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E3w3F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E3w3F.md.png&quot; alt=&quot;6E3w3F.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据源跨平台兼容&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;兼容各种数据源类型，支持海量数据。可连接公司各种各样业务管理系统、第三方平台互联网技术统计数据、电子表格等数据文件以及公共数据综合服务平台，轻松整合所有相关业务数据，帮助企业消除数据孤岛。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户权限控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RBAC控制，以及数据的用户绑定，用户创建的数据源只能为单用户使用，使数据更加安全和独立。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E3oDA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E3oDA.md.png&quot; alt=&quot;6E3oDA.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3D可视化&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;我们不仅提供全周期模型资源支持，还可以通过设计师灵动设计的场景模型与现实设备进行数据互通与联动，真正实现3D万物可视，还支持3D地图等效果，支持地理数据多层叠加。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;支持多种图表效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持各类图表，折线，点，柱，地图等都有涉及，支持多种可视化图表库，echarts，highcharts，d3，g2等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6AztxJ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6AztxJ.md.png&quot; alt=&quot;6AztxJ.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据下钻和上浮&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持多图表数据联动，以及下钻和上浮&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/yHG6TU&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/22/yHG6TU.md.png&quot; alt=&quot;yHG6TU.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2021年前端重修课</title>
    <link href="https://yangyfeng.github.io//posts/cf2c43d.html"/>
    <id>https://yangyfeng.github.io//posts/cf2c43d.html</id>
    <published>2021-02-01T16:00:00.000Z</published>
    <updated>2021-03-27T06:24:34.631Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;2021年前端重修课&quot;&gt;&lt;a href=&quot;#2021年前端重修课&quot; class=&quot;headerlink&quot; title=&quot;2021年前端重修课&quot;&gt;&lt;/a&gt;2021年前端重修课&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/ymtXrR&quot;
        
      
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://yangyfeng.github.io/blogpost/tags/Javascript/"/>
    
  </entry>
  
</feed>
